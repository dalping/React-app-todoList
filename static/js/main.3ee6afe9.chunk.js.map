{"version":3,"sources":["components/Header.js","components/Do.js","components/ToDoList.js","hooks/useFetch.js","components/CreateToDo.js","components/Wording.js","App.js","reportWebVitals.js","index.js"],"names":["Header","style","width","className","Do","todo","mykey","useState","isDone","setIsDone","isDel","setIsDel","isModalVisible","setIsModalVisible","checked","onChange","fetch","method","headers","body","JSON","stringify","content","then","res","ok","ghost","onClick","title","visible","onOk","onCancel","ToDoList","todolist","url","state","data","setData","useEffect","json","useFetch","reload","length","Object","keys","map","key","CreateToDo","isLoading","setIsLoading","isTxt","setIsTxt","onSubmit","e","preventDefault","doRef","current","value","useRef","target","placeholder","ref","type","Wording","N","Math","floor","random","word","i","dummy","wording","id","sentence","App","isLoad","setIsLoad","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ee6afe9.chunk.js","sourcesContent":["export default function Header(){\n    return(\n        <div style={{width:'100%'}} className=\"header\">\n            <span>GoodDay ToDoList</span>\n        </div>\n    );\n}","import { Checkbox,Button,Modal } from 'antd';\nimport { useState } from 'react';\n\nexport default function Do({todo,mykey}){\n\n    const [isDone, setIsDone] = useState(todo.isDone);\n    const [isDel, setIsDel] = useState(false);\n    const [isModalVisible, setIsModalVisible] = useState(false);\n\n    function del(){\n        fetch(`https://react-app-todolist-17894-default-rtdb.firebaseio.com/todolist/todo/${mykey}.json`,{\n            method : 'DELETE'\n        }).then(res =>{\n            if(res.ok){\n                setIsDel(true); //컴포넌트 새로고침\n            }\n        })\n    }\n    \n    const showModal = () => {\n        setIsModalVisible(true);\n      };\n\n    const handleOk = () => {\n        setIsModalVisible(false);\n        del();\n      };\n\n    const handleCancel = () => {\n        setIsModalVisible(false);\n      };\n\n    function toggleDone(){ //체크박스\n        fetch(`https://react-app-todolist-17894-default-rtdb.firebaseio.com/todolist/todo/${mykey}.json`,{\n            method : 'PUT',\n            headers : {\n                'Content-Type' : 'application/json',\n            },\n            body : JSON.stringify({\n                content : todo.content,\n                isDone : !isDone,\n            }),\n        }).then(res=>{\n            if(res.ok){\n                setIsDone(!isDone);\n            }\n        });\n    }\n\n    if(isDel === true){ //컴포넌트 삭제\n        return null;\n    }\n\n    return(\n        <tr className={todo.isDone? 'off':''}>\n            <td><Checkbox checked={isDone} onChange={toggleDone}></Checkbox></td>\n            <td className={isDone? 'checked' : ''}>{todo.content}</td>\n            <td>\n                <Button ghost onClick={showModal}>삭제</Button>\n                <Modal title=\"ToDo 삭제\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\n                    <p>삭제하시겠습니까</p>\n                </Modal>\n            </td>\n        </tr>    \n    );\n}","import Do from \"./Do\";\nimport useFetch from \"../hooks/useFetch\";\n\nexport default function ToDoList({reload}){\n\n    const url = \"https://react-app-todolist-17894-default-rtdb.firebaseio.com/todolist/todo.json\";\n    let todolist = useFetch(url,reload);\n\n    if(todolist.length === 0){ // 로딩중..\n        return <span>Loading...</span>\n    }\n    \n    return(\n        <table>\n            <tbody>\n                {Object.keys(todolist).map(key=>(\n                    <Do todo={todolist[key]} key={key} mykey={key}></Do>\n                ))}\n            </tbody>\n        </table>\n    );\n}","import { useEffect,useState } from \"react\";\n\nexport default function useFetch(url,state){\n    const [data, setData] = useState([]);\n\n    useEffect(()=>{\n        fetch(url)\n        .then(res=>{\n            return res.json();\n        })\n        .then(data=>{\n            setData(data);\n        });\n    },[url,state]);\n\n    return data;\n}\n\n","import { Button,Input } from 'antd';\nimport { useState,useRef } from 'react';\n\nexport default function CreateToDo({reload}){\n\n    const [isLoading, setIsLoading] = useState(false);\n    const [isTxt,setIsTxt] = useState('');\n\n    function handleChange(e){\n        setIsTxt(e.target.value);\n    }\n\n    function onSubmit(e){ //새로고침 방지\n        e.preventDefault();\n        if(!isLoading){\n            setIsLoading(true);\n            fetch(\"https://react-app-todolist-17894-default-rtdb.firebaseio.com/todolist/todo.json\",{\n                method : 'POST',\n                headers : {\n                    'Content-Type' : 'application/json',\n                },\n                body : JSON.stringify({\n                    content:doRef.current.state.value,\n                    isDone:false\n                }),\n            }).then(res=>{\n                if(res.ok){\n                    setIsTxt('');\n                    setIsLoading(false); //중복 클릭 방지\n                    reload(); //ToDoList컴포넌트 다시 불러오기\n                    }\n                });\n            }\n        }\n\n    const doRef = useRef(null);\n    \n    return(\n        <form style={{width:'70%'}}  onSubmit={onSubmit}>\n            <div className=\"create-to-do\">\n                <Input className=\"txt\" onChange={handleChange} value={isTxt} style ={{width:'80%'}} placeholder=\"할 일을 입력하세요.\" ref={doRef} type=\"text\"></Input>\n                <Button type=\"primary\" onClick={onSubmit}>등록</Button>\n            </div>\n        </form>\n    );\n}","import dummy from \"../db/data.json\";\n\nexport default function Wording(){\n\n    const N = Math.floor(Math.random() * 10 + 1);\n    let word = \"\";\n\n    for(let i=0; i < 10 ; i++ ){\n        if(dummy.wording[i].id === N){\n            word = dummy.wording[i].sentence;\n            break;\n        }\n    }\n\n    return(\n        <div>\n            {word}\n        </div>\n    );\n}","import './App.css';\nimport Header from './components/Header';\nimport ToDoList from './components/ToDoList';\nimport CreateToDo from './components/CreateToDo';\nimport Wording from './components/Wording';\nimport { useState } from 'react';\nimport \"antd/dist/antd.css\";\n\nfunction App() {\n\n  const [isLoad, setIsLoad] = useState(false);\n\n  function reLoad(){//ToDoList reload?\n    setIsLoad(!isLoad);\n  }\n\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Wording/>\n      <CreateToDo reload={reLoad}/>\n      <ToDoList reload={isLoad}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}